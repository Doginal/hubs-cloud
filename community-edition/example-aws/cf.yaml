AWSTemplateFormatVersion: 2010-09-09

Parameters:
#network
  VpcCIDR:
    Type: String
    Default: 10.100.0.0/16    
  PublicSubnet1CIDR:
    Type: String
    Default: 10.100.0.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.100.1.0/24 
#pgsql
  dbPass:
    Type: String
    Default: changeme
  dbSize:
    Type: String
    Default: db.t3.medium
#eks    
  nodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.medium
  EKSNodeAMI:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/aws/service/eks/optimized-ami/1.20/amazon-linux-2/recommended/image_id'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Routes'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PUBLIC-subnet-1'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PUBLIC-subnet-2'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # NoIngressSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: "no-ingress-sg"
  #     GroupDescription: "Security group with no ingress rule"
  #     VpcId: !Ref VPC
  

  eksRole:
    Description: Allows EKS to manage clusters on your behalf.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole

  SgEksNode:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sg_eks_node
      GroupDescription: allow eks ingress for pgsql
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5349
          ToPort: 5349
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 35000
          ToPort: 60000
          CidrIp: 0.0.0.0/0
  pgsqlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-retdb-sg'
      GroupDescription: allow eks ingress for pgsql
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SgEksNode
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
  pgsqlSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"        
    Properties: 
      DBSubnetGroupDescription: !Sub '${AWS::StackName}-retdb-subnetgroup'
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  PostgreSQL:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: 12.16
      DBInstanceIdentifier: !Sub '${AWS::StackName}-retdb'
      MasterUsername: postgres
      MasterUserPassword: !Ref dbPass
      DBInstanceClass: !Ref dbSize
      MultiAZ: false
      PubliclyAccessible: true
      VPCSecurityGroups:
      - !Ref pgsqlSecurityGroup
      AllocatedStorage: 10
      DBSubnetGroupName: !Ref pgsqlSubnetGroup

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub '${AWS::StackName}-eks'
      RoleArn: !GetAtt  eksRole.Arn
      ResourcesVpcConfig:
        # SecurityGroupIds:
        #   - !Ref SgEks
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true

  EKSNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EKSNodeGroupNodeLaunchConfig
      MinSize: 2
      MaxSize: 10
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
      Tags:
      - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}-eks'
        Value: 'owned'
        PropagateAtLaunch: 'true'

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSNodeGroupNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodeInstanceProfile
      InstanceType: !Ref nodeInstanceType
      SecurityGroups:
      - !Ref SgEksNode
      ImageId: !Ref EKSNodeAMI

  SgEfs:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for EFS to allow EKS nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref SgEksNode
  EFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  SesSmtpUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        - PolicyName: "SesSmtpPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ses:SendRawEmail"
                Resource: "*"

  SesSmtpAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref SesSmtpUser



Outputs:
  EFSid:
    Description: File System ID of the created EFS.
    Value: !Ref EFS
  EKSname:
    Value: !Sub '${AWS::StackName}-eks'
  DBpass:
    Value: !Ref dbPass
  DBhost:
    Value: !GetAtt PostgreSQL.Endpoint.Address
  SMTPuser:
    Description: 'SMTP Username'
    Value: !Ref SesSmtpAccessKey
  SmtpUserSecret:
    Description: 'SMTP Secret Access Key'
    Value: !GetAtt SesSmtpAccessKey.SecretAccessKey
